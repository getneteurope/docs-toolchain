var search_data = {"index":{"searchIndex":["object","string","toolchain","baseextension","build","cli","configmanager","extensionmanager","git","idchecker","linkchecker","notify","slack","patternblacklist","test","cli","add()","bg_black()","bg_blue()","bg_brown()","bg_cyan()","bg_gray()","bg_green()","bg_magenta()","bg_red()","black()","blink()","blue()","bold()","brown()","build()","check_docs()","clear()","collect_attributes()","colorize()","create_error()","cyan()","format_net_exception()","generate_info()","get()","get()","get_mod_attrs_from_doc()","get_recursively()","get_response()","gray()","green()","init()","italic()","load()","load_doc()","log()","magenta()","main()","merge_recursively()","mkdir()","new()","new()","next_id()","parse_args()","parse_args()","parse_ref()","post_process_errors()","print_errors()","print_loaded_extensions()","red()","register()","reverse_color()","run()","run()","run()","run()","run_tests()","send()","setup()","stage_log()","template()","test_files()","test_link()","underline()","update()"],"longSearchIndex":["object","string","toolchain","toolchain::baseextension","toolchain::build","toolchain::build::cli","toolchain::configmanager","toolchain::extensionmanager","toolchain::git","toolchain::idchecker","toolchain::linkchecker","toolchain::notify","toolchain::notify::slack","toolchain::patternblacklist","toolchain::test","toolchain::test::cli","toolchain::notify::slack#add()","string#bg_black()","string#bg_blue()","string#bg_brown()","string#bg_cyan()","string#bg_gray()","string#bg_green()","string#bg_magenta()","string#bg_red()","string#black()","string#blink()","string#blue()","string#bold()","string#brown()","toolchain::build::build()","object#check_docs()","toolchain::extensionmanager#clear()","object#collect_attributes()","object#colorize()","toolchain::baseextension#create_error()","string#cyan()","toolchain::format_net_exception()","toolchain::git::generate_info()","toolchain::configmanager#get()","toolchain::extensionmanager#get()","object#get_mod_attrs_from_doc()","object#get_recursively()","toolchain::linkchecker#get_response()","string#gray()","string#green()","toolchain::notify::slack#init()","string#italic()","toolchain::configmanager#load()","object#load_doc()","object#log()","string#magenta()","object#main()","object#merge_recursively()","object#mkdir()","toolchain::extensionmanager::new()","toolchain::notify::slack::new()","toolchain::extensionmanager#next_id()","toolchain::build::cli::parse_args()","toolchain::test::cli::parse_args()","toolchain::git::parse_ref()","object#post_process_errors()","object#print_errors()","object#print_loaded_extensions()","string#red()","toolchain::extensionmanager#register()","string#reverse_color()","toolchain::baseextension#run()","toolchain::idchecker#run()","toolchain::linkchecker#run()","toolchain::patternblacklist#run()","object#run_tests()","toolchain::notify::slack#send()","toolchain::build::setup()","object#stage_log()","toolchain::notify::slack#template()","object#test_files()","toolchain::linkchecker#test_link()","string#underline()","toolchain::configmanager#update()"],"info":[["Object","","Object.html","",""],["String","","String.html","","<p>Default class: String\n<p>Text color and weight modifications\n"],["Toolchain","","Toolchain.html","","<p>Toolchain module\n<p>Toolchain module\n"],["Toolchain::BaseExtension","","Toolchain/BaseExtension.html","","<p>Base class for extensions, all derived extensions must implement the run(document) function and register …\n"],["Toolchain::Build","","Toolchain/Build.html","","<p>Build module\n<p>Build module Relevant modlues/classes/functions for the Build stage\n"],["Toolchain::Build::CLI","","Toolchain/Build/CLI.html","","<p>CLI for Build stage\n"],["Toolchain::ConfigManager","","Toolchain/ConfigManager.html","","<p>Central class keeping track of all configuration options.\n<p>Configurations can be changed via certain files …\n"],["Toolchain::ExtensionManager","","Toolchain/ExtensionManager.html","","<p>ExtensionManager used to register extensions based on base_extension, which are run on every file.\n"],["Toolchain::Git","","Toolchain/Git.html","","<p>Git module\n<p>Umbrella module for all Git related actions.\n"],["Toolchain::IdChecker","","Toolchain/IdChecker.html","","<p>ID Checker\n<p>Check IDs according to a stricter standard than the default Asciidoctor standard.\n"],["Toolchain::LinkChecker","","Toolchain/LinkChecker.html","","<p>Link Checker\n<p>Check links and detect whether a link is dead, has moved, cannot be reached, etc.\n"],["Toolchain::Notify","","Toolchain/Notify.html","","<p>Notify module\n<p>Umbrella namespace for all notification connectors\n"],["Toolchain::Notify::Slack","","Toolchain/Notify/Slack.html","","<p>*Slack class*\n<p>Class representing a messaging connection to a Slack token.\n<p>Example\n"],["Toolchain::PatternBlacklist","","Toolchain/PatternBlacklist.html","","<p>Pattern Checker\n<p>Checks the text against a predefined list of patterns which are not allowed.\n"],["Toolchain::Test","","Toolchain/Test.html","","<p>Test module\n"],["Toolchain::Test::CLI","","Toolchain/Test/CLI.html","","<p>CLI for Test stage\n"],["add","Toolchain::Notify::Slack","Toolchain/Notify/Slack.html#method-i-add","(msg)","<p>Add a message <code>msg</code> to the Slack message file.\n<p>Returns nothing.\n"],["bg_black","String","String.html#method-i-bg_black","()",""],["bg_blue","String","String.html#method-i-bg_blue","()",""],["bg_brown","String","String.html#method-i-bg_brown","()",""],["bg_cyan","String","String.html#method-i-bg_cyan","()",""],["bg_gray","String","String.html#method-i-bg_gray","()",""],["bg_green","String","String.html#method-i-bg_green","()",""],["bg_magenta","String","String.html#method-i-bg_magenta","()",""],["bg_red","String","String.html#method-i-bg_red","()",""],["black","String","String.html#method-i-black","()",""],["blink","String","String.html#method-i-blink","()",""],["blue","String","String.html#method-i-blue","()",""],["bold","String","String.html#method-i-bold","()",""],["brown","String","String.html#method-i-brown","()",""],["build","Toolchain::Build","Toolchain/Build.html#method-c-build","(build_dir = DEFAULT_BUILD_DIR, index: 'index.adoc')","<p>Build phase\n<p>Build the HTML in <code>build_dir</code> with <code>index</code> as index file. Default:\n<p><code>build_dir</code> = <code>DEFAULT_BUILD_DIR</code> …\n"],["check_docs","Object","Object.html#method-i-check_docs","(included_files, content_dir)","<p>Check all included files in for a given index.\n<p>All include files <code>included_files</code> in <code>content_dir</code> will be …\n"],["clear","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-clear","()","<p>Clear the internal state, reset to default state. Returns nothing.\n"],["collect_attributes","Object","Object.html#method-i-collect_attributes","(doc, attribs = {})","<p>Recursively loops thourgh asdciidoc includes and collects their newly set attributes. Returns collection …\n"],["colorize","Object","Object.html#method-i-colorize","(text, color)","<p>Colorize <code>text</code> in the color specified by <code>color</code>.\n<p>Returns the colorized string\n"],["create_error","Toolchain::BaseExtension","Toolchain/BaseExtension.html#method-i-create_error","(msg:, location: nil, extras: nil)","<p>Creates an error, consisting of the following fields:\n<p>id &mdash; continuous ID to identify order of errors\n<p>type … &mdash; "],["cyan","String","String.html#method-i-cyan","()",""],["format_net_exception","Toolchain","Toolchain.html#method-c-format_net_exception","(exc, link)","<p>Given an exception <code>exc</code> and a link <code>link</code>, format the message which shall be displayed.\n<p>Returns the formatted …\n"],["generate_info","Toolchain::Git","Toolchain/Git.html#method-c-generate_info","()","<p>Generate a hash containing Git information:\n<p>author &mdash; author name and email\n<p>commit &mdash; commit hash\n"],["get","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-get","(identifier = nil)","<p>Get the configuration value for a key <code>identifier</code>.\n<p>The <code>identifier</code> is a string in the format <em>key1.key2.key3</em> …\n"],["get","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-get","()","<p>Return the list of registered extensions.\n"],["get_mod_attrs_from_doc","Object","Object.html#method-i-get_mod_attrs_from_doc","(doc)","<p>Takes document <code>doc</code>. Returns <code>attribs</code> all attributes newly set in this document.\n"],["get_recursively","Object","Object.html#method-i-get_recursively","(map, keys)","<p>Get a certain value in a hash of hashes.\n<p>The key is described by <code>keys</code>, an array of keys representing the …\n"],["get_response","Toolchain::LinkChecker","Toolchain/LinkChecker.html#method-i-get_response","(link)","<p>Send a <code>GET</code> request to <code>link</code> and return the result.\n"],["gray","String","String.html#method-i-gray","()",""],["green","String","String.html#method-i-green","()",""],["init","Toolchain::Notify::Slack","Toolchain/Notify/Slack.html#method-i-init","()","<p><strong>MUST</strong> be called before the first use. Initializes all needed variables like <code>content_path</code>, but also creates …\n"],["italic","String","String.html#method-i-italic","()",""],["load","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-load","(file)","<p>Load configuration from <code>file</code>.\n<p>Returns the configuration as hash (YAML parsed)\n"],["load_doc","Object","Object.html#method-i-load_doc","(filename, attribs = {})","<p>Load adoc file <code>filename</code>, convert given the parameters <code>safe</code> and <code>parse</code> discuss.asciidoctor.org/Compiling-all-includes-into-a-master-Adoc-file-td2308.html …\n"],["log","Object","Object.html#method-i-log","(tag, msg, color = :blue, bold = false)","<p>Create a log entry in the format:\n\n<pre>[tag] msg</pre>\n<p>using the given color and font weight\n"],["magenta","String","String.html#method-i-magenta","()",""],["main","Object","Object.html#method-i-main","(argv = ARGV)",""],["merge_recursively","Object","Object.html#method-i-merge_recursively","(left, right)","<p>Merge two hashes <code>left</code> and <code>right</code> recursively\n<p>Merge strategy: right join\n<p>Returns merged hash.\n"],["mkdir","Object","Object.html#method-i-mkdir","(path)","<p>mkdir\n<p>Create <code>path</code> if <code>path</code> does not exist. Returns nothing.\n"],["new","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-c-new","()",""],["new","Toolchain::Notify::Slack","Toolchain/Notify/Slack.html#method-c-new","()",""],["next_id","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-next_id","()","<p>Return the next id.\n"],["parse_args","Toolchain::Build::CLI","Toolchain/Build/CLI.html#method-c-parse_args","(argv = ARGV)","<p>Parse arguments given as <code>argv</code>.\n<p>Returns hash containing all options as key=value pairs and the parser object. …\n"],["parse_args","Toolchain::Test::CLI","Toolchain/Test/CLI.html#method-c-parse_args","(argv = ARGV)","<p>Parse arguments given as <code>argv</code>.\n<p>Returns hash containing all options as key=value pairs and the parser object. …\n"],["parse_ref","Toolchain::Git","Toolchain/Git.html#method-c-parse_ref","(ref = ENV['GITHUB_REF'], fallback = nil)","<p>Pass a reference <code>ref</code> and a fallback <code>fallback</code> and return the parsed reference.\n<p>Reference, in this case, …\n"],["post_process_errors","Object","Object.html#method-i-post_process_errors","(index_errors, errors_map)","<p>Resolves all errors from index to point to the correct location in include files.\n<p>Given <code>index_errors</code> and …\n"],["print_errors","Object","Object.html#method-i-print_errors","(errors_map)","<p>Print all errors in <code>errors_map</code>. <code>errors_map</code> is a hash containing a mapping of filename -&gt; [errors]. …\n"],["print_loaded_extensions","Object","Object.html#method-i-print_loaded_extensions","()","<p>print help print all loaded extensions\n"],["red","String","String.html#method-i-red","()",""],["register","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-register","(ext)","<p>Register an extension <code>ext</code> with the <code>ExtensionManager</code>.\n<p>Returns nothing.\n"],["reverse_color","String","String.html#method-i-reverse_color","()",""],["run","Toolchain::BaseExtension","Toolchain/BaseExtension.html#method-i-run","(_adoc)","<p>Takes a document (a converted asciidoctor document) as input.\n<p>Parameters: <code>_adoc</code> contains parsed and original …\n"],["run","Toolchain::IdChecker","Toolchain/IdChecker.html#method-i-run","(adoc)","<p>Run the ID tests on the given document (<code>adoc</code>).\n<p>Returns a list of errors (can be empty).\n"],["run","Toolchain::LinkChecker","Toolchain/LinkChecker.html#method-i-run","(adoc)","<p>Run the Link tests on the given document (<code>adoc</code>).\n<p>Returns a list of errors (can be empty).\n"],["run","Toolchain::PatternBlacklist","Toolchain/PatternBlacklist.html#method-i-run","(adoc, blacklist_file = '../blacklist.txt')","<p>Run the Pattern tests on the given document (<code>adoc</code>). Illegal patterns are loaded from <code>blacklist_file</code>. …\n"],["run_tests","Object","Object.html#method-i-run_tests","(filename)","<p>Run all extensions registered with <code>ExtensionManager</code> on the file <code>filename</code>.\n<p>During this process, the file …\n"],["send","Toolchain::Notify::Slack","Toolchain/Notify/Slack.html#method-i-send","()","<p>Send the message defined in +@file+ to the Slack channel in +ENV+.\n<p>Returns nothing.\n"],["setup","Toolchain::Build","Toolchain/Build.html#method-c-setup","(build_dir = DEFAULT_BUILD_DIR, content: 'content')","<p>Setup build directory.\n<p>Params:\n<p><code>build_dir</code> Build directory (default: <code>DEFAULT_BUILD_DIR</code>)\n"],["stage_log","Object","Object.html#method-i-stage_log","(stage, msg, color: :green)","<p>Create a log entry for a given stage.\n<p>The stage is defined by <code>stage</code>, and will be formated like:\n\n<pre class=\"ruby\">[<span class=\"ruby-identifier\">stage</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["template","Toolchain::Notify::Slack","Toolchain/Notify/Slack.html#method-i-template","(msg)","<p>Returns a Slack template with <code>msg</code> as message part. Returned format it Slack-readable JSON.\n"],["test_files","Object","Object.html#method-i-test_files","(files)","<p>Test all files given as <code>files</code>, <code>files</code> must be a list of filenames. Only used for testing individual files, …\n"],["test_link","Toolchain::LinkChecker","Toolchain/LinkChecker.html#method-i-test_link","(link)","<p>Test a <code>link</code>, i.e. try to perform a <code>GET</code> request.\n<p>Return nil if success, or <code>msg</code> if an error occured.\n"],["underline","String","String.html#method-i-underline","()",""],["update","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-update","(file)","<p>Update current configuration with configuration from <code>file</code>.\n<p>Merging of the configuration options is with …\n"]]}}