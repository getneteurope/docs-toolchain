var search_data = {"index":{"searchIndex":["hash","object","string","toolchain","adoc","createtoc","baseextension","baseprocess","build","cli","configmanager","extensionmanager","filenotfound","git","hash","idchecker","ifchecker","linkchecker","patternblacklist","post","coderaystylecopy","compilesearchindex","htmlproofer","htmltest","rename","postprocessmanager","pre","combinejs","transpilejs","preprocessmanager","process","cli","processmanager","setup","tableofcontent","test","cli","_create_regex()","_parse_html()","_parse_section()","bg_black()","bg_blue()","bg_cyan()","bg_gray()","bg_green()","bg_magenta()","bg_red()","bg_yellow()","black()","blink()","blue()","bold()","build()","build_path()","check_docs()","clear()","clear()","clear()","collect_attributes()","colorize()","combine_and_replace()","combine_js()","contains?()","content_path()","convert_nodes()","create_error()","create_error()","custom_dir()","cyan()","document_root()","error()","except()","except!()","format_net_exception()","generate_html_from_toc()","generate_index()","generate_info()","get()","get()","get()","get()","get_mod_attrs_from_doc()","get_recursively()","get_response()","get_script_sources()","gray()","green()","html_path()","italic()","load()","load_doc()","log()","magenta()","main()","merge_recursively()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_id()","only()","only!()","openstruct_to_hash()","parse_args()","parse_args()","parse_args()","parse_ref()","print_errors()","print_loaded_extensions()","red()","register()","register()","return_code()","reverse_color()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_tests()","setup()","stage_log()","test_link()","tick_toc_checkboxes()","time_format()","toolchain_path()","underline()","update()","yellow()","licence","readme","licence","readme","licence","readme","lunr.js"],"longSearchIndex":["hash","object","string","toolchain","toolchain::adoc","toolchain::adoc::createtoc","toolchain::baseextension","toolchain::baseprocess","toolchain::build","toolchain::build::cli","toolchain::configmanager","toolchain::extensionmanager","toolchain::filenotfound","toolchain::git","toolchain::hash","toolchain::idchecker","toolchain::ifchecker","toolchain::linkchecker","toolchain::patternblacklist","toolchain::post","toolchain::post::coderaystylecopy","toolchain::post::compilesearchindex","toolchain::post::htmlproofer","toolchain::post::htmltest","toolchain::post::rename","toolchain::postprocessmanager","toolchain::pre","toolchain::pre::combinejs","toolchain::pre::transpilejs","toolchain::preprocessmanager","toolchain::process","toolchain::process::cli","toolchain::processmanager","toolchain::setup","toolchain::tableofcontent","toolchain::test","toolchain::test::cli","toolchain::post::compilesearchindex#_create_regex()","toolchain::post::compilesearchindex#_parse_html()","toolchain::post::compilesearchindex#_parse_section()","string#bg_black()","string#bg_blue()","string#bg_cyan()","string#bg_gray()","string#bg_green()","string#bg_magenta()","string#bg_red()","string#bg_yellow()","string#black()","string#blink()","string#blue()","string#bold()","toolchain::build::build()","toolchain::build_path()","object#check_docs()","toolchain::configmanager#clear()","toolchain::extensionmanager#clear()","toolchain::processmanager#clear()","toolchain::adoc::collect_attributes()","object#colorize()","toolchain::pre::combinejs#combine_and_replace()","toolchain::pre::combinejs#combine_js()","toolchain::configmanager#contains?()","toolchain::content_path()","toolchain::tableofcontent::convert_nodes()","toolchain::baseextension#create_error()","toolchain::extensionmanager::create_error()","toolchain::custom_dir()","string#cyan()","toolchain::document_root()","object#error()","hash#except()","hash#except!()","toolchain::format_net_exception()","toolchain::adoc::createtoc#generate_html_from_toc()","toolchain::post::compilesearchindex#generate_index()","toolchain::git::generate_info()","toolchain::configmanager#get()","toolchain::extensionmanager#get()","toolchain::post::compilesearchindex#get()","toolchain::processmanager#get()","toolchain::adoc::get_mod_attrs_from_doc()","object#get_recursively()","toolchain::linkchecker#get_response()","toolchain::pre::combinejs#get_script_sources()","string#gray()","string#green()","toolchain::html_path()","string#italic()","toolchain::configmanager#load()","toolchain::adoc::load_doc()","object#log()","string#magenta()","object#main()","object#merge_recursively()","toolchain::adoc::createtoc::new()","toolchain::baseprocess::new()","toolchain::configmanager::new()","toolchain::extensionmanager::new()","toolchain::post::compilesearchindex::new()","toolchain::post::htmlproofer::new()","toolchain::post::htmltest::new()","toolchain::postprocessmanager::new()","toolchain::pre::combinejs::new()","toolchain::preprocessmanager::new()","toolchain::processmanager::new()","toolchain::extensionmanager#next_id()","hash#only()","hash#only!()","toolchain::hash::openstruct_to_hash()","toolchain::build::cli::parse_args()","toolchain::process::cli::parse_args()","toolchain::test::cli::parse_args()","toolchain::git::parse_ref()","object#print_errors()","object#print_loaded_extensions()","string#red()","toolchain::extensionmanager#register()","toolchain::processmanager#register()","toolchain::processmanager#return_code()","string#reverse_color()","toolchain::adoc::createtoc#run()","toolchain::baseextension#run()","toolchain::baseprocess#run()","toolchain::idchecker#run()","toolchain::ifchecker#run()","toolchain::linkchecker#run()","toolchain::patternblacklist#run()","toolchain::post::coderaystylecopy#run()","toolchain::post::compilesearchindex#run()","toolchain::post::htmlproofer#run()","toolchain::post::htmltest#run()","toolchain::post::rename#run()","toolchain::pre::combinejs#run()","toolchain::pre::transpilejs#run()","toolchain::processmanager#run()","object#run_tests()","toolchain::setup::setup()","object#stage_log()","toolchain::linkchecker#test_link()","toolchain::adoc::createtoc#tick_toc_checkboxes()","toolchain::git::time_format()","toolchain::toolchain_path()","string#underline()","toolchain::configmanager#update()","string#yellow()","","","","","","",""],"info":[["Hash","","Hash.html","","<p>stackoverflow.com/a/11105831\n"],["Object","","Object.html","",""],["String","","String.html","","<p>Default class: String\n<p>Text color and weight modifications\n"],["Toolchain","","Toolchain.html","","<p>frozen_string_literal = true\n<p>Toolchain module\n<p>Toolchain main module\n"],["Toolchain::Adoc","","Toolchain/Adoc.html","","<p>Module containing Asciidoctor related Toolchain manipulations.\n"],["Toolchain::Adoc::CreateTOC","","Toolchain/Adoc/CreateTOC.html","",""],["Toolchain::BaseExtension","","Toolchain/BaseExtension.html","","<p>Base class for extensions, all derived extensions must implement the run(document) function and register …\n"],["Toolchain::BaseProcess","","Toolchain/BaseProcess.html","","<p>Foundation for all pre and post processing related steps. The field {priority} will determine the order …\n"],["Toolchain::Build","","Toolchain/Build.html","","<p>Build module\n<p>Build module Relevant modlues/classes/functions for the Build stage\n"],["Toolchain::Build::CLI","","Toolchain/Build/CLI.html","","<p>CLI for Build stage\n"],["Toolchain::ConfigManager","","Toolchain/ConfigManager.html","","<p>Central class keeping track of all configuration options.\n<p>Configurations can be changed via certain files …\n"],["Toolchain::ExtensionManager","","Toolchain/ExtensionManager.html","","<p>ExtensionManager Used to register extensions based on <code>BaseExtension</code>, which are run on every file.\n"],["Toolchain::FileNotFound","","Toolchain/FileNotFound.html","",""],["Toolchain::Git","","Toolchain/Git.html","","<p>Git module\n<p>Umbrella module for all Git related actions.\n"],["Toolchain::Hash","","Toolchain/Hash.html","","<p>Hash related operations\n"],["Toolchain::IdChecker","","Toolchain/IdChecker.html","","<p>ID Checker\n<p>Check IDs according to a stricter standard than the default Asciidoctor standard.\n"],["Toolchain::IfChecker","","Toolchain/IfChecker.html","","<p>Include Checker\n<p>Check the number of open and closing IFs\n"],["Toolchain::LinkChecker","","Toolchain/LinkChecker.html","","<p>Link Checker\n<p>Check links and detect whether a link is dead, has moved, cannot be reached, etc.\n"],["Toolchain::PatternBlacklist","","Toolchain/PatternBlacklist.html","","<p>Pattern Checker\n<p>Checks the text against a predefined list of patterns which are not allowed.\n"],["Toolchain::Post","","Toolchain/Post.html","","<p>Adds modules for postprocessing files.\n<p>Adds modules for postprocessing files.\n<p>Adds modules for postprocessing …\n"],["Toolchain::Post::CodeRayStyleCopy","","Toolchain/Post/CodeRayStyleCopy.html","","<p>Copies the CodeRay style defined in `content/css/asciidoctor-coderay.css` to the build dir.\n<p>NOTE This …\n"],["Toolchain::Post::CompileSearchIndex","","Toolchain/Post/CompileSearchIndex.html","","<p>Provides an interface to create a lunr search index from the generated HTML files.\n"],["Toolchain::Post::HTMLProofer","","Toolchain/Post/HTMLProofer.html","","<p>Post process that runs HTML Proofer on the generated HTML documents.\n"],["Toolchain::Post::HTMLTest","","Toolchain/Post/HTMLTest.html","","<p>Post process that runs HTML Proofer on the generated HTML documents.\n"],["Toolchain::Post::Rename","","Toolchain/Post/Rename.html","","<p>Duplicates the file Home.html to index.html, in order the have a correct startpage.\n"],["Toolchain::PostProcessManager","","Toolchain/PostProcessManager.html","","<p>Class representing the manager for all processes which need to be run during the *Post Processing* stage. …\n"],["Toolchain::Pre","","Toolchain/Pre.html","",""],["Toolchain::Pre::CombineJS","","Toolchain/Pre/CombineJS.html","","<p>Adds modules for preprocessing files.\n"],["Toolchain::Pre::TranspileJS","","Toolchain/Pre/TranspileJS.html","","<p>Babel wrapper class for PreProcessing\n"],["Toolchain::PreProcessManager","","Toolchain/PreProcessManager.html","","<p>Class representing the manager for all processes which need to be run during the *Pre Processing* stage. …\n"],["Toolchain::Process","","Toolchain/Process.html","","<p>END TEST\n<p>Pre- and Post-processing module\n"],["Toolchain::Process::CLI","","Toolchain/Process/CLI.html","","<p>CLI for Pre- and Post-processing stages\n"],["Toolchain::ProcessManager","","Toolchain/ProcessManager.html","","<p>Class ProcessManager Used to register processes based on <code>BaseProcess</code>, which run either before or after …\n"],["Toolchain::Setup","","Toolchain/Setup.html","","<p>Module related to the setup of the build directory\n"],["Toolchain::TableOfContent","","Toolchain/TableOfContent.html","","<p>Module for Table of Content utility functions.\n"],["Toolchain::Test","","Toolchain/Test.html","","<p>Test module\n"],["Toolchain::Test::CLI","","Toolchain/Test/CLI.html","","<p>CLI for Test stage\n"],["_create_regex","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-_create_regex","(pattern)","<p>Creates a Regex object from a wildcard string <code>pattern</code>. stackoverflow.com/a/6449534\n<p>Returns valid Regex …\n"],["_parse_html","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-_parse_html","(html_file)","<p>Parse a single HTML file <code>html_file</code>. This will convert the document to a Nokogiri object and parse each …\n"],["_parse_section","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-_parse_section","(sect, filename)","<p>Parse a Nokogiri section <code>sect</code> and return relevant information for lunr. This function needs the <code>filename</code> …\n"],["bg_black","String","String.html#method-i-bg_black","()",""],["bg_blue","String","String.html#method-i-bg_blue","()",""],["bg_cyan","String","String.html#method-i-bg_cyan","()",""],["bg_gray","String","String.html#method-i-bg_gray","()",""],["bg_green","String","String.html#method-i-bg_green","()",""],["bg_magenta","String","String.html#method-i-bg_magenta","()",""],["bg_red","String","String.html#method-i-bg_red","()",""],["bg_yellow","String","String.html#method-i-bg_yellow","()",""],["black","String","String.html#method-i-black","()",""],["blink","String","String.html#method-i-blink","()",""],["blue","String","String.html#method-i-blue","()",""],["bold","String","String.html#method-i-bold","()",""],["build","Toolchain::Build","Toolchain/Build.html#method-c-build","(build_dir = ::Toolchain.build_path, index: 'index.adoc')","<p>Build phase\n<p>Build the HTML in <code>build_dir</code> with <code>index</code> as index file. Default:\n<p><code>build_dir</code> = <code>DEFAULT_BUILD_DIR</code> …\n"],["build_path","Toolchain","Toolchain.html#method-c-build_path","()","<p>build_path Returns path to toolchain build directory.\n"],["check_docs","Object","Object.html#method-i-check_docs","(included_files, content_dir)","<p>Check all included files in for a given index.\n<p>All include files <code>included_files</code> in <code>content_dir</code> will be …\n"],["clear","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-clear","()","<p>Delete the currently loaded configuration.\n<p>Does NOT affect the files from which the config was loaded, …\n"],["clear","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-clear","()","<p>Clear the internal state, reset to default state. Returns nothing.\n"],["clear","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-i-clear","()","<p>Delete all registered processes.\n"],["collect_attributes","Toolchain::Adoc","Toolchain/Adoc.html#method-c-collect_attributes","(doc, additional_attribs = {})","<p>Recursively loops thourgh asdciidoc includes and collects their newly set attributes. Adds <code>additional_attribs</code> …\n"],["colorize","Object","Object.html#method-i-colorize","(text, color)","<p>Colorize <code>text</code> in the color specified by <code>color</code>.\n<p>Returns the colorized string\n"],["combine_and_replace","Toolchain::Pre::CombineJS","Toolchain/Pre/CombineJS.html#method-i-combine_and_replace","(html, path)","<p>Replaces all JS tags in an Nokogiri HTML object <code>html</code> with one tag that includes one big blob JS.\n<p>Overwrites …\n"],["combine_js","Toolchain::Pre::CombineJS","Toolchain/Pre/CombineJS.html#method-i-combine_js","(html, path, separator = \"\\n\\n\")","<p>Combines JS files found in <code>html</code> Nokogiri object, and writes the combined JS to a new file. Takes HTML …\n"],["contains?","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-contains-3F","(field, value)","<p>Check whether the field at <code>field</code> contains <code>value</code>.\n<p>Return true or false.\n"],["content_path","Toolchain","Toolchain.html#method-c-content_path","()","<p>content_path Returns path to content directory root.\n"],["convert_nodes","Toolchain::TableOfContent","Toolchain/TableOfContent.html#method-c-convert_nodes","(entry, nodes = {})","<p>Build toc entry tree from <code>entry</code> and fill <code>nodes</code> with entries. Returns nothing.\n"],["create_error","Toolchain::BaseExtension","Toolchain/BaseExtension.html#method-i-create_error","(msg:, location: nil, extras: nil)","<p>Create an error using <code>msg</code> stating the error at <code>location</code>.\n<p>This method supports further extension through …\n"],["create_error","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-c-create_error","(msg:, type:, location: nil, extras: nil)","<p>Creates an error, consisting of the following fields:\n<p>id &mdash; continuous ID to identify order of errors\n<p>type … &mdash; "],["custom_dir","Toolchain","Toolchain.html#method-c-custom_dir","()","<p>custom_dir Returns the custom/ directory, which holds custom extensions and processes in the content …\n"],["cyan","String","String.html#method-i-cyan","()",""],["document_root","Toolchain","Toolchain.html#method-c-document_root","()","<p>document_root Returns the root of content structure, i.e. where <code>index.adoc</code> is located.\n"],["error","Object","Object.html#method-i-error","(msg)","<p>Log error to STDOUT.\n"],["except","Hash","Hash.html#method-i-except","(keys)","<p>Returns a hash that includes everything but the given keys.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = { <span class=\"ruby-value\">a:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-value\">b:</span> <span class=\"ruby-keyword\">false</span>, <span class=\"ruby-value\">c:</span> <span class=\"ruby-keyword\">nil</span>}\n<span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">except</span>(<span class=\"ruby-value\">:c</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["except!","Hash","Hash.html#method-i-except-21","(keys)","<p>Replaces the hash without the given keys.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = { <span class=\"ruby-value\">a:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-value\">b:</span> <span class=\"ruby-keyword\">false</span>, <span class=\"ruby-value\">c:</span> <span class=\"ruby-keyword\">nil</span>}\n<span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">except!</span>(<span class=\"ruby-value\">:c</span>) <span class=\"ruby-comment\"># =&gt; { ...</span>\n</pre>\n"],["format_net_exception","Toolchain","Toolchain.html#method-c-format_net_exception","(exc, link)","<p>Given an exception <code>exc</code> and a link <code>link</code>, format the message which shall be displayed.\n<p>Returns the formatted …\n"],["generate_html_from_toc","Toolchain::Adoc::CreateTOC","Toolchain/Adoc/CreateTOC.html#method-i-generate_html_from_toc","(toc_elements)","\n<pre>Recursivelz generates a HTML fragment for the Table Of Content</pre>\n<p>Takes OpenStruct of <code>toc_elements</code> as input …\n"],["generate_index","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-generate_index","(htmls)","<p>Generates lunr index JSON and lunr DB JSON file from HTMLs. <code>htmls</code> is a list of strings, representing …\n"],["generate_info","Toolchain::Git","Toolchain/Git.html#method-c-generate_info","()","<p>Generate a hash containing Git information:\n<p>author &mdash; author name and email\n<p>commit &mdash; commit hash\n"],["get","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-get","(identifier = nil, default: nil)","<p>Get the configuration value for a key <code>identifier</code>.\n<p>The <code>identifier</code> is a string in the format <em>key1.key2.key3</em> …\n"],["get","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-get","()","<p>Return the list of registered extensions.\n"],["get","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-get","(id, field)","<p>Get the value for key <code>field</code> for this section given the section id <code>id</code>. Returns the label, if there is …\n"],["get","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-i-get","()","<p>Returns all registered processes as list.\n"],["get_mod_attrs_from_doc","Toolchain::Adoc","Toolchain/Adoc.html#method-c-get_mod_attrs_from_doc","(doc)","<p>Takes document <code>doc</code>.\n<p>Returns <code>attribs</code> all attributes newly set in this document.\n"],["get_recursively","Object","Object.html#method-i-get_recursively","(map, keys)","<p>Get a certain value in a hash of hashes.\n<p>The key is described by <code>keys</code>, an array of keys representing the …\n"],["get_response","Toolchain::LinkChecker","Toolchain/LinkChecker.html#method-i-get_response","(link)","<p>Send a <code>GET</code> request to <code>link</code> and return the result.\n"],["get_script_sources","Toolchain::Pre::CombineJS","Toolchain/Pre/CombineJS.html#method-i-get_script_sources","(html)","<p>Take Nokogiri HTML <code>html</code> and check for javascript files.\n<p>Returns <code>js_files</code> array containing <code>src</code> attribute …\n"],["gray","String","String.html#method-i-gray","()",""],["green","String","String.html#method-i-green","()",""],["html_path","Toolchain","Toolchain.html#method-c-html_path","()","<p>html_path Returns path to generated html files.\n"],["italic","String","String.html#method-i-italic","()",""],["load","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-load","( file = File.join(Toolchain.content_path, 'config.yaml') )","<p>Load configuration from <code>file</code>.\n<p>Returns the configuration as hash (YAML parsed)\n"],["load_doc","Toolchain::Adoc","Toolchain/Adoc.html#method-c-load_doc","(filename, attribs = {'root' => Toolchain.build_path})","<p>Load adoc file <code>filename</code>, convert given the parameters <code>safe</code> and <code>parse</code> discuss.asciidoctor.org/Compiling-all-includes-into-a-master-Adoc-file-td2308.html …\n"],["log","Object","Object.html#method-i-log","(tag, msg, color = :blue, bold = false, stream: $stdout)","<p>Create a log entry in the format:\n\n<pre>[tag] msg</pre>\n<p>using the given color and font weight.\n"],["magenta","String","String.html#method-i-magenta","()",""],["main","Object","Object.html#method-i-main","(argv = ARGV)",""],["merge_recursively","Object","Object.html#method-i-merge_recursively","(left, right)","<p>Merge two hashes <code>left</code> and <code>right</code> recursively\n<p>Merge strategy: right join\n<p>Returns merged hash.\n"],["new","Toolchain::Adoc::CreateTOC","Toolchain/Adoc/CreateTOC.html#method-c-new","()",""],["new","Toolchain::BaseProcess","Toolchain/BaseProcess.html#method-c-new","(priority = 0)","<p>Create a new Process object with <code>priority</code> (default: 0).\n<p><code>priority</code> determines the order in which processes …\n"],["new","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-c-new","()",""],["new","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-c-new","()",""],["new","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-c-new","(priority = 0)",""],["new","Toolchain::Post::HTMLProofer","Toolchain/Post/HTMLProofer.html#method-c-new","(priority = -10)",""],["new","Toolchain::Post::HTMLTest","Toolchain/Post/HTMLTest.html#method-c-new","(priority = -10)",""],["new","Toolchain::PostProcessManager","Toolchain/PostProcessManager.html#method-c-new","()",""],["new","Toolchain::Pre::CombineJS","Toolchain/Pre/CombineJS.html#method-c-new","(priority)",""],["new","Toolchain::PreProcessManager","Toolchain/PreProcessManager.html#method-c-new","()",""],["new","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-c-new","(phase = nil)",""],["next_id","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-next_id","()","<p>Return the next id.\n"],["only","Hash","Hash.html#method-i-only","(keys)","<p>Returns a Hash with all keys in <code>keys</code> and deletes all other keys.\n"],["only!","Hash","Hash.html#method-i-only-21","(keys)","<p>Returns the Hash with all keys in <code>keys</code> and deletes all other keys.\n"],["openstruct_to_hash","Toolchain::Hash","Toolchain/Hash.html#method-c-openstruct_to_hash","(object, hash = {})","<p>Takes OpenStruct <code>object</code> and returns <code>hash</code> Useful for converting OpenStruct Hash for later conversion to …\n"],["parse_args","Toolchain::Build::CLI","Toolchain/Build/CLI.html#method-c-parse_args","(argv = ARGV)","<p>Parse arguments given as <code>argv</code>.\n<p>Returns hash containing all options as key=value pairs and the parser object. …\n"],["parse_args","Toolchain::Process::CLI","Toolchain/Process/CLI.html#method-c-parse_args","(argv = ARGV)","<p>Parse arguments given as <code>argv</code>.\n<p>Returns hash containing all options as key=value pairs and the parser object. …\n"],["parse_args","Toolchain::Test::CLI","Toolchain/Test/CLI.html#method-c-parse_args","(argv = ARGV)","<p>Parse arguments given as <code>argv</code>.\n<p>Returns hash containing all options as key=value pairs and the parser object. …\n"],["parse_ref","Toolchain::Git","Toolchain/Git.html#method-c-parse_ref","(ref = ENV['GITHUB_REF'], fallback = nil)","<p>Pass a reference <code>ref</code> and a fallback <code>fallback</code> and return the parsed reference.\n<p>Reference, in this case, …\n"],["print_errors","Object","Object.html#method-i-print_errors","(errors_map)","<p>Print all errors in <code>errors_map</code>. <code>errors_map</code> is a hash containing a mapping of filename -&gt; [errors]. …\n"],["print_loaded_extensions","Object","Object.html#method-i-print_loaded_extensions","()","<p>print help print all loaded extensions\n"],["red","String","String.html#method-i-red","()",""],["register","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-register","(ext)","<p>Register an extension <code>ext</code> with the <code>ExtensionManager</code>.\n<p>Returns nothing.\n"],["register","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-i-register","(proc)","<p>Register a process <code>proc</code> and sort the list of registered processes by priority.\n<p>Returns nothing.\n"],["return_code","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-i-return_code","(error_code = 10)","<p>Set the return code `@code` to non-zero value `error_code`. This means the stage failed.\n"],["reverse_color","String","String.html#method-i-reverse_color","()",""],["run","Toolchain::Adoc::CreateTOC","Toolchain/Adoc/CreateTOC.html#method-i-run","( document, json_filepath = @default_json_filepath, html_filepath = @default_html_filepath )","<p>Creates a TOC JSON file from an Asciidoctor document <code>document</code> Default JSON path is taken from <code>ConfigManager</code> …\n"],["run","Toolchain::BaseExtension","Toolchain/BaseExtension.html#method-i-run","(_adoc)","<p>Takes a document (a converted asciidoctor document) as input.\n<p>Parameters: <code>_adoc</code> contains parsed and original …\n"],["run","Toolchain::BaseProcess","Toolchain/BaseProcess.html#method-i-run","()","<p>Runs the process. Takes no arguments.\n<p>Returns nothing, but throws an exception if not implemented in the …\n"],["run","Toolchain::IdChecker","Toolchain/IdChecker.html#method-i-run","(adoc)","<p>Run the ID tests on the given document (<code>adoc</code>).\n<p>Returns a list of errors (can be empty).\n"],["run","Toolchain::IfChecker","Toolchain/IfChecker.html#method-i-run","(adoc)","<p>Run the if tests on the given document (<code>adoc</code>).\n<p>Returns a list of errors (can be empty).\n"],["run","Toolchain::LinkChecker","Toolchain/LinkChecker.html#method-i-run","(adoc)","<p>Run the Link tests on the given document (<code>adoc</code>).\n<p>Returns a list of errors (can be empty).\n"],["run","Toolchain::PatternBlacklist","Toolchain/PatternBlacklist.html#method-i-run","(adoc, blacklist_file = ::File.join( ::Toolchain.content_path, ::Toolchain::ConfigManager.instance.get('checkers.pattern.blacklist')) )","<p>Run the Pattern tests on the given document (<code>adoc</code>). Illegal patterns are loaded from <code>blacklist_file</code>. …\n"],["run","Toolchain::Post::CodeRayStyleCopy","Toolchain/Post/CodeRayStyleCopy.html#method-i-run","()",""],["run","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-run","(outfile: nil, dbfile: nil)","<p>Takes a single HTML file or a list of HTML files (<code>html</code>). If not provided, the HTML will be inferred from …\n"],["run","Toolchain::Post::HTMLProofer","Toolchain/Post/HTMLProofer.html#method-i-run","(directory = ::Toolchain.html_path)",""],["run","Toolchain::Post::HTMLTest","Toolchain/Post/HTMLTest.html#method-i-run","(directory = ::Toolchain.html_path)",""],["run","Toolchain::Post::Rename","Toolchain/Post/Rename.html#method-i-run","()",""],["run","Toolchain::Pre::CombineJS","Toolchain/Pre/CombineJS.html#method-i-run","()","<p>Combines JS files referenced in docinfo{,-footer}.html into a single .js file and then reinserts the …\n"],["run","Toolchain::Pre::TranspileJS","Toolchain/Pre/TranspileJS.html#method-i-run","()","<p>Transpile all JS files using Babel. Ignore the path <code>js/vendor/</code>\n"],["run","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-i-run","()","<p>Run all registered processes as separate threads.\n"],["run_tests","Object","Object.html#method-i-run_tests","(filename)","<p>Run all extensions registered with <code>ExtensionManager</code> on the file <code>filename</code>.\n<p>During this process, the file …\n"],["setup","Toolchain::Setup","Toolchain/Setup.html#method-c-setup","(build_dir = ::Toolchain.build_path, content: 'content')","<p>Setup build directory.\n<p>Params:\n<p><code>build_dir</code> Build directory\n"],["stage_log","Object","Object.html#method-i-stage_log","(stage, msg, color = :green)","<p>Create a log entry for a given stage.\n<p>The stage is defined by <code>stage</code>, and will be formated like:\n\n<pre class=\"ruby\">[<span class=\"ruby-identifier\">stage</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["test_link","Toolchain::LinkChecker","Toolchain/LinkChecker.html#method-i-test_link","(link)","<p>Test a <code>link</code>, i.e. try to perform a <code>GET</code> request.\n<p>Return nil if success, or <code>msg</code> if an error occured.\n"],["tick_toc_checkboxes","Toolchain::Adoc::CreateTOC","Toolchain/Adoc/CreateTOC.html#method-i-tick_toc_checkboxes","(page_id, toc_document)","<p>Tick all checkboxes of ancestors of current page Requires <code>page_id</code> and Nokogiri Table of Content <code>toc_document</code> …\n"],["time_format","Toolchain::Git","Toolchain/Git.html#method-c-time_format","()","<p>Returns the time format used by <code>Toolchain::Git</code>.\n"],["toolchain_path","Toolchain","Toolchain.html#method-c-toolchain_path","()","<p>toolchain_path Returns path to toolchain root.\n"],["underline","String","String.html#method-i-underline","()",""],["update","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-update","(file)","<p>Update current configuration with configuration from <code>file</code>.\n<p>Merging of the configuration options is with …\n"],["yellow","String","String.html#method-i-yellow","()",""],["LICENCE","","bin/ext/htmltest_0_12_1_linux_amd64/LICENCE.html","","<p>The MIT License (MIT) Copyright © 2016 William Pimblett\n<p>Permission is hereby granted, free of charge, …\n"],["README","","bin/ext/htmltest_0_12_1_linux_amd64/README_md.html","","<p>:white_check_mark: htmltest\n<p><img src=\"https://travis-ci.org/wjdp/htmltest.svg?branch=master\">\n<img src=\"https://goreportcard.com/badge/github.com/wjdp/htmltest\"> ...\n"],["LICENCE","","bin/ext/htmltest_0_12_1_osx_amd64/LICENCE.html","","<p>The MIT License (MIT) Copyright © 2016 William Pimblett\n<p>Permission is hereby granted, free of charge, …\n"],["README","","bin/ext/htmltest_0_12_1_osx_amd64/README_md.html","","<p>:white_check_mark: htmltest\n<p><img src=\"https://travis-ci.org/wjdp/htmltest.svg?branch=master\">\n<img src=\"https://goreportcard.com/badge/github.com/wjdp/htmltest\"> ...\n"],["LICENCE","","bin/ext/htmltest_0_12_1_windows_amd64/LICENCE.html","","<p>The MIT License (MIT) Copyright © 2016 William Pimblett\n<p>Permission is hereby granted, free of charge, …\n"],["README","","bin/ext/htmltest_0_12_1_windows_amd64/README_md.html","","<p>:white_check_mark: htmltest\n<p><img src=\"https://travis-ci.org/wjdp/htmltest.svg?branch=master\">\n<img src=\"https://goreportcard.com/badge/github.com/wjdp/htmltest\"> ...\n"],["lunr.js","","lib/utils/lunr_js.html","","<p>/**\n\n<pre>* lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.8\n* Copyright ...</pre>\n"]]}}