var search_data = {"index":{"searchIndex":["asciidoctor","abstractblock","abstractnode","document","section","multipagehtml5css","multipagehtml5converter","object","string","toolchain","adoc","baseextension","baseprocess","build","cli","configmanager","extensionmanager","git","idchecker","ifchecker","linkchecker","notify","slack","patternblacklist","post","compilesearchindex","postprocessmanager","pre","combineandtranspilejs","createtoc","preprocessmanager","process","cli","processmanager","test","cli","_create_regex()","_parse_html()","_parse_section()","add()","add_nav_links()","bg_black()","bg_blue()","bg_brown()","bg_cyan()","bg_gray()","bg_green()","bg_magenta()","bg_red()","black()","blink()","blue()","bold()","brown()","build()","build_path()","check_docs()","clear()","clear()","collect_attributes()","colorize()","combine_and_replace_js()","combine_js()","content_path()","convert()","create_error()","create_error()","cyan()","document()","document_root()","embedded()","format_net_exception()","generate_index()","generate_info()","generate_nav_links()","generate_outline()","get()","get()","get()","get_mod_attrs_from_doc()","get_recursively()","get_response()","get_script_src_from_html_file()","gray()","green()","init()","inline_anchor()","italic()","load()","load_doc()","log()","magenta()","main()","merge_recursively()","mkdir()","new()","new()","new()","new()","new()","new()","new()","new()","new_outline_doc()","next_id()","openstruct_to_hash()","outline()","parse_args()","parse_args()","parse_args()","parse_ref()","post_process_errors()","print_errors()","print_loaded_extensions()","process()","red()","register()","register()","related_to?()","reparent()","replace_js_tags_with_blob()","reverse_color()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_tests()","section()","sections?()","sectnum()","sectnum()","send()","set_multipage_attrs()","setup()","stage_log()","template()","test_files()","test_link()","toolchain_path()","underline()","update()","write()","lunr.js"],"longSearchIndex":["asciidoctor","asciidoctor::abstractblock","asciidoctor::abstractnode","asciidoctor::document","asciidoctor::section","multipagehtml5css","multipagehtml5converter","object","string","toolchain","toolchain::adoc","toolchain::baseextension","toolchain::baseprocess","toolchain::build","toolchain::build::cli","toolchain::configmanager","toolchain::extensionmanager","toolchain::git","toolchain::idchecker","toolchain::ifchecker","toolchain::linkchecker","toolchain::notify","toolchain::notify::slack","toolchain::patternblacklist","toolchain::post","toolchain::post::compilesearchindex","toolchain::postprocessmanager","toolchain::pre","toolchain::pre::combineandtranspilejs","toolchain::pre::createtoc","toolchain::preprocessmanager","toolchain::process","toolchain::process::cli","toolchain::processmanager","toolchain::test","toolchain::test::cli","toolchain::post::compilesearchindex#_create_regex()","toolchain::post::compilesearchindex#_parse_html()","toolchain::post::compilesearchindex#_parse_section()","toolchain::notify::slack#add()","multipagehtml5converter#add_nav_links()","string#bg_black()","string#bg_blue()","string#bg_brown()","string#bg_cyan()","string#bg_gray()","string#bg_green()","string#bg_magenta()","string#bg_red()","string#black()","string#blink()","string#blue()","string#bold()","string#brown()","toolchain::build::build()","toolchain::build_path()","object#check_docs()","toolchain::extensionmanager#clear()","toolchain::processmanager#clear()","toolchain::adoc::collect_attributes()","object#colorize()","toolchain::pre::combineandtranspilejs#combine_and_replace_js()","toolchain::pre::combineandtranspilejs#combine_js()","toolchain::content_path()","multipagehtml5converter#convert()","toolchain::baseextension#create_error()","toolchain::extensionmanager::create_error()","string#cyan()","multipagehtml5converter#document()","toolchain::document_root()","multipagehtml5converter#embedded()","toolchain::format_net_exception()","toolchain::post::compilesearchindex#generate_index()","toolchain::git::generate_info()","multipagehtml5converter#generate_nav_links()","multipagehtml5converter#generate_outline()","toolchain::configmanager#get()","toolchain::extensionmanager#get()","toolchain::processmanager#get()","toolchain::adoc::get_mod_attrs_from_doc()","object#get_recursively()","toolchain::linkchecker#get_response()","toolchain::pre::combineandtranspilejs#get_script_src_from_html_file()","string#gray()","string#green()","toolchain::notify::slack#init()","multipagehtml5converter#inline_anchor()","string#italic()","toolchain::configmanager#load()","toolchain::adoc::load_doc()","object#log()","string#magenta()","object#main()","object#merge_recursively()","object#mkdir()","multipagehtml5converter::new()","toolchain::baseprocess::new()","toolchain::configmanager::new()","toolchain::extensionmanager::new()","toolchain::notify::slack::new()","toolchain::post::compilesearchindex::new()","toolchain::pre::combineandtranspilejs::new()","toolchain::processmanager::new()","multipagehtml5converter#new_outline_doc()","toolchain::extensionmanager#next_id()","toolchain::pre::createtoc#openstruct_to_hash()","multipagehtml5converter#outline()","toolchain::build::cli::parse_args()","toolchain::process::cli::parse_args()","toolchain::test::cli::parse_args()","toolchain::git::parse_ref()","object#post_process_errors()","object#print_errors()","object#print_loaded_extensions()","multipagehtml5css#process()","string#red()","toolchain::extensionmanager#register()","toolchain::processmanager#register()","asciidoctor::abstractnode#related_to?()","multipagehtml5converter#reparent()","toolchain::pre::combineandtranspilejs#replace_js_tags_with_blob()","string#reverse_color()","toolchain::baseextension#run()","toolchain::baseprocess#run()","toolchain::idchecker#run()","toolchain::ifchecker#run()","toolchain::linkchecker#run()","toolchain::patternblacklist#run()","toolchain::post::compilesearchindex#run()","toolchain::pre::combineandtranspilejs#run()","toolchain::pre::createtoc#run()","toolchain::processmanager#run()","object#run_tests()","multipagehtml5converter#section()","asciidoctor::document#sections?()","asciidoctor::document#sectnum()","asciidoctor::section#sectnum()","toolchain::notify::slack#send()","multipagehtml5converter#set_multipage_attrs()","toolchain::build::setup()","object#stage_log()","toolchain::notify::slack#template()","object#test_files()","toolchain::linkchecker#test_link()","toolchain::toolchain_path()","string#underline()","toolchain::configmanager#update()","multipagehtml5converter#write()",""],"info":[["Asciidoctor","","Asciidoctor.html","",""],["Asciidoctor::AbstractBlock","","Asciidoctor/AbstractBlock.html","","<p>HTML5 Multipage Converter adapted Asciidoctor::AbstractBlock\n"],["Asciidoctor::AbstractNode","","Asciidoctor/AbstractNode.html","","<p>HTML5 Multipage Converter adapted Asciidoctor::AbstractNode\n"],["Asciidoctor::Document","","Asciidoctor/Document.html","","<p>HTML5 Multipage Converter adapted Asciidoctor::Document\n"],["Asciidoctor::Section","","Asciidoctor/Section.html","","<p>HTML5 Multipage Converter adapted Asciidoctor::Document\n"],["MultipageHtml5CSS","","MultipageHtml5CSS.html","","<p>HTML5 Multipage Converter CSS Preprocessor\n"],["MultipageHtml5Converter","","MultipageHtml5Converter.html","","<p>HTML5 Multipage Converter based on HTML5 Converter\n"],["Object","","Object.html","",""],["String","","String.html","","<p>Default class: String\n<p>Text color and weight modifications\n"],["Toolchain","","Toolchain.html","","<p>Toolchain module\n<p>Toolchain module\n"],["Toolchain::Adoc","","Toolchain/Adoc.html","","<p>Module containing Asciidoctor related Toolchain manipulations.\n"],["Toolchain::BaseExtension","","Toolchain/BaseExtension.html","","<p>Base class for extensions, all derived extensions must implement the run(document) function and register …\n"],["Toolchain::BaseProcess","","Toolchain/BaseProcess.html","","<p>Foundation for all pre and post processing related steps. The field {priority} will determine the order …\n"],["Toolchain::Build","","Toolchain/Build.html","","<p>Build module\n<p>Build module Relevant modlues/classes/functions for the Build stage\n"],["Toolchain::Build::CLI","","Toolchain/Build/CLI.html","","<p>CLI for Build stage\n"],["Toolchain::ConfigManager","","Toolchain/ConfigManager.html","","<p>Central class keeping track of all configuration options.\n<p>Configurations can be changed via certain files …\n"],["Toolchain::ExtensionManager","","Toolchain/ExtensionManager.html","","<p>ExtensionManager Used to register extensions based on <code>BaseExtension</code>, which are run on every file.\n"],["Toolchain::Git","","Toolchain/Git.html","","<p>Git module\n<p>Umbrella module for all Git related actions.\n"],["Toolchain::IdChecker","","Toolchain/IdChecker.html","","<p>ID Checker\n<p>Check IDs according to a stricter standard than the default Asciidoctor standard.\n"],["Toolchain::IfChecker","","Toolchain/IfChecker.html","","<p>Include Checker\n<p>Check the number of open and closing IFs\n"],["Toolchain::LinkChecker","","Toolchain/LinkChecker.html","","<p>Link Checker\n<p>Check links and detect whether a link is dead, has moved, cannot be reached, etc.\n"],["Toolchain::Notify","","Toolchain/Notify.html","","<p>Notify module\n<p>Umbrella namespace for all notification connectors\n"],["Toolchain::Notify::Slack","","Toolchain/Notify/Slack.html","","<p>*Slack class*\n<p>Class representing a messaging connection to a Slack token.\n<p>Example\n"],["Toolchain::PatternBlacklist","","Toolchain/PatternBlacklist.html","","<p>Pattern Checker\n<p>Checks the text against a predefined list of patterns which are not allowed.\n"],["Toolchain::Post","","Toolchain/Post.html","","<p>Adds modules for postprocessing files.\n"],["Toolchain::Post::CompileSearchIndex","","Toolchain/Post/CompileSearchIndex.html","","<p>Provides an interface to create a lunr search index from the generated HTML files.\n"],["Toolchain::PostProcessManager","","Toolchain/PostProcessManager.html","","<p>Class representing the manager for all processes which need to be run during the *Post Processing* stage. …\n"],["Toolchain::Pre","","Toolchain/Pre.html","",""],["Toolchain::Pre::CombineAndTranspileJS","","Toolchain/Pre/CombineAndTranspileJS.html","","<p>Adds modules for preprocessing files.\n"],["Toolchain::Pre::CreateTOC","","Toolchain/Pre/CreateTOC.html","","<p>Adds modules for preprocessing files.\n"],["Toolchain::PreProcessManager","","Toolchain/PreProcessManager.html","","<p>Class representing the manager for all processes which need to be run during the *Pre Processing* stage. …\n"],["Toolchain::Process","","Toolchain/Process.html","","<p>END TEST\n<p>Pre- and Post-processing module\n"],["Toolchain::Process::CLI","","Toolchain/Process/CLI.html","","<p>CLI for Pre- and Post-processing stages\n"],["Toolchain::ProcessManager","","Toolchain/ProcessManager.html","","<p>Class ProcessManager Used to register processes based on <code>BaseProcess</code>, which run either before or after …\n"],["Toolchain::Test","","Toolchain/Test.html","","<p>Test module\n"],["Toolchain::Test::CLI","","Toolchain/Test/CLI.html","","<p>CLI for Test stage\n"],["_create_regex","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-_create_regex","(pattern)","<p>Creates a Regex object from a wildcard string <code>pattern</code>. stackoverflow.com/a/6449534\n<p>Returns valid Regex …\n"],["_parse_html","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-_parse_html","(html_file)","<p>Parse a single HTML file <code>html_file</code>. This will convert the document to a Nokogiri object and parse each …\n"],["_parse_section","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-_parse_section","(sect)","<p>Parse a Nokogiri section <code>sect</code> and return relevant information for lunr. Included information is <code>ref</code>, …\n"],["add","Toolchain::Notify::Slack","Toolchain/Notify/Slack.html#method-i-add","(msg)","<p>Add a message <code>msg</code> to the Slack message file.\n<p>Returns nothing.\n"],["add_nav_links","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-add_nav_links","(page)","<p>Add navigation links to the page (from nav_links)\n<p>Returns nothing.\n"],["bg_black","String","String.html#method-i-bg_black","()",""],["bg_blue","String","String.html#method-i-bg_blue","()",""],["bg_brown","String","String.html#method-i-bg_brown","()",""],["bg_cyan","String","String.html#method-i-bg_cyan","()",""],["bg_gray","String","String.html#method-i-bg_gray","()",""],["bg_green","String","String.html#method-i-bg_green","()",""],["bg_magenta","String","String.html#method-i-bg_magenta","()",""],["bg_red","String","String.html#method-i-bg_red","()",""],["black","String","String.html#method-i-black","()",""],["blink","String","String.html#method-i-blink","()",""],["blue","String","String.html#method-i-blue","()",""],["bold","String","String.html#method-i-bold","()",""],["brown","String","String.html#method-i-brown","()",""],["build","Toolchain::Build","Toolchain/Build.html#method-c-build","(build_dir = DEFAULT_BUILD_DIR, index: 'index.adoc')","<p>Build phase\n<p>Build the HTML in <code>build_dir</code> with <code>index</code> as index file. Default:\n<p><code>build_dir</code> = <code>DEFAULT_BUILD_DIR</code> …\n"],["build_path","Toolchain","Toolchain.html#method-c-build_path","(path = nil)","<p>build_path Returns path to toolchain build directory.\n"],["check_docs","Object","Object.html#method-i-check_docs","(included_files, content_dir)","<p>Check all included files in for a given index.\n<p>All include files <code>included_files</code> in <code>content_dir</code> will be …\n"],["clear","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-clear","()","<p>Clear the internal state, reset to default state. Returns nothing.\n"],["clear","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-i-clear","()","<p>Delete all registered processes.\n"],["collect_attributes","Toolchain::Adoc","Toolchain/Adoc.html#method-c-collect_attributes","(doc, additional_attribs = {})","<p>Recursively loops thourgh asdciidoc includes and collects their newly set attributes. Adds <code>additional_attribs</code> …\n"],["colorize","Object","Object.html#method-i-colorize","(text, color)","<p>Colorize <code>text</code> in the color specified by <code>color</code>.\n<p>Returns the colorized string\n"],["combine_and_replace_js","Toolchain::Pre::CombineAndTranspileJS","Toolchain/Pre/CombineAndTranspileJS.html#method-i-combine_and_replace_js","(path)","<p>Replaces all js tags in an html file <code>path</code> with a tag that includes one big blob js.\n<p>Returns an OpenStruct …\n"],["combine_js","Toolchain::Pre::CombineAndTranspileJS","Toolchain/Pre/CombineAndTranspileJS.html#method-i-combine_js","(path, seperator = \"\\n\\n\")","<p>Combines JS files found in html file Returns string of combined js files\n"],["content_path","Toolchain","Toolchain.html#method-c-content_path","(path = nil)","<p>content_path Returns path to content directory root.\n"],["convert","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-convert","(node, transform = nil, opts = {})","<p>Extend Asciidoctor&#39;s convert().\n<p>Returns transformed node.\n"],["create_error","Toolchain::BaseExtension","Toolchain/BaseExtension.html#method-i-create_error","(msg:, location: nil, extras: nil)","<p>Create an error using <code>msg</code> stating the error at <code>location</code>.\n<p>This method supports further extension through …\n"],["create_error","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-c-create_error","(msg:, type:, location: nil, extras: nil)","<p>Creates an error, consisting of the following fields:\n<p>id &mdash; continuous ID to identify order of errors\n<p>type … &mdash; "],["cyan","String","String.html#method-i-cyan","()",""],["document","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-document","(node)","<p>Process Document (either the original full document or a processed page)\n<p>Returns converted node.\n"],["document_root","Toolchain","Toolchain.html#method-c-document_root","()","<p>document_root Returns the root of content structure, i.e. where <code>index.adoc</code> is located.\n"],["embedded","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-embedded","(node)","<p>Process Document in embeddable mode (either the original full document or a processed page)\n"],["format_net_exception","Toolchain","Toolchain.html#method-c-format_net_exception","(exc, link)","<p>Given an exception <code>exc</code> and a link <code>link</code>, format the message which shall be displayed.\n<p>Returns the formatted …\n"],["generate_index","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-generate_index","(htmls)","<p>Generates lunr index .json file from HTMLs. <code>htmls</code> is a list of strings, representing the HTML file names. …\n"],["generate_info","Toolchain::Git","Toolchain/Git.html#method-c-generate_info","(path = nil)","<p>Generate a hash containing Git information:\n<p>author &mdash; author name and email\n<p>commit &mdash; commit hash\n"],["generate_nav_links","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-generate_nav_links","(doc)","<p>Generate navigation links for all pages in document; save HTML to nav_links\n"],["generate_outline","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-generate_outline","(node, opts = {})","<p>Generate the actual HTML outline for the TOC. This method is analogous to Html5Converter outline().\n"],["get","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-get","(identifier = nil, default: nil)","<p>Get the configuration value for a key <code>identifier</code>.\n<p>The <code>identifier</code> is a string in the format <em>key1.key2.key3</em> …\n"],["get","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-get","()","<p>Return the list of registered extensions.\n"],["get","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-i-get","()","<p>Returns all registered processes as list.\n"],["get_mod_attrs_from_doc","Toolchain::Adoc","Toolchain/Adoc.html#method-c-get_mod_attrs_from_doc","(doc)","<p>Takes document <code>doc</code>.\n<p>Returns <code>attribs</code> all attributes newly set in this document.\n"],["get_recursively","Object","Object.html#method-i-get_recursively","(map, keys)","<p>Get a certain value in a hash of hashes.\n<p>The key is described by <code>keys</code>, an array of keys representing the …\n"],["get_response","Toolchain::LinkChecker","Toolchain/LinkChecker.html#method-i-get_response","(link)","<p>Send a <code>GET</code> request to <code>link</code> and return the result.\n"],["get_script_src_from_html_file","Toolchain::Pre::CombineAndTranspileJS","Toolchain/Pre/CombineAndTranspileJS.html#method-i-get_script_src_from_html_file","(path)","<p>Parses html file <code>path</code> loking for javascript files\n<p>Returns <code>script_source_files</code> array containing “src” …\n"],["gray","String","String.html#method-i-gray","()",""],["green","String","String.html#method-i-green","()",""],["init","Toolchain::Notify::Slack","Toolchain/Notify/Slack.html#method-i-init","()","<p><strong>MUST</strong> be called before the first use. Initializes all needed variables like <code>content_path</code>, but also creates …\n"],["inline_anchor","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-inline_anchor","(node)","<p>Include chapter pages in cross-reference links. This method overrides for the :xref node type only.\n"],["italic","String","String.html#method-i-italic","()",""],["load","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-load","( file = File.join(Toolchain.toolchain_path, 'config', 'default.yaml') )","<p>Load configuration from <code>file</code>.\n<p>Returns the configuration as hash (YAML parsed)\n"],["load_doc","Toolchain::Adoc","Toolchain/Adoc.html#method-c-load_doc","(filename, attribs = {'root' => Toolchain.document_root})","<p>TODO: use a Struct instead of an OpenStruct (with proper documentation of the fields)\n<p>Load adoc file  …\n"],["log","Object","Object.html#method-i-log","(tag, msg, color = :blue, bold = false, length: 14)","<p>Create a log entry in the format:\n\n<pre>[tag] msg</pre>\n<p>using the given color and font weight\n"],["magenta","String","String.html#method-i-magenta","()",""],["main","Object","Object.html#method-i-main","(argv = ARGV)",""],["merge_recursively","Object","Object.html#method-i-merge_recursively","(left, right)","<p>Merge two hashes <code>left</code> and <code>right</code> recursively\n<p>Merge strategy: right join\n<p>Returns merged hash.\n"],["mkdir","Object","Object.html#method-i-mkdir","(path)","<p>mkdir\n<p>Create <code>path</code> if <code>path</code> does not exist. Returns nothing.\n"],["new","MultipageHtml5Converter","MultipageHtml5Converter.html#method-c-new","(backend, opts = {})",""],["new","Toolchain::BaseProcess","Toolchain/BaseProcess.html#method-c-new","(priority = 0)","<p>Create a new Process object with <code>priority</code> (default: 0).\n<p><code>priority</code> determines the order in which processes …\n"],["new","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-c-new","()",""],["new","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-c-new","()",""],["new","Toolchain::Notify::Slack","Toolchain/Notify/Slack.html#method-c-new","()",""],["new","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-c-new","()",""],["new","Toolchain::Pre::CombineAndTranspileJS","Toolchain/Pre/CombineAndTranspileJS.html#method-c-new","(priority = 0)",""],["new","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-c-new","()",""],["new_outline_doc","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-new_outline_doc","(node, new_parent: nil, for_page: nil)","<p>From node, create a skeleton document that will be used to generate the TOC. This is first used to create …\n"],["next_id","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-next_id","()","<p>Return the next id.\n"],["openstruct_to_hash","Toolchain::Pre::CreateTOC","Toolchain/Pre/CreateTOC.html#method-i-openstruct_to_hash","(object, hash = {})","\n<pre>Takes OpenStruct +object+ and returns +hash+</pre>\n<p>Useful for converting OpenStruct Hash for later conversion …\n"],["outline","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-outline","(node, opts = {})","<p>Override Html5Converter outline() to return a custom TOC outline\n"],["parse_args","Toolchain::Build::CLI","Toolchain/Build/CLI.html#method-c-parse_args","(argv = ARGV)","<p>Parse arguments given as <code>argv</code>.\n<p>Returns hash containing all options as key=value pairs and the parser object. …\n"],["parse_args","Toolchain::Process::CLI","Toolchain/Process/CLI.html#method-c-parse_args","(argv = ARGV)","<p>Parse arguments given as <code>argv</code>.\n<p>Returns hash containing all options as key=value pairs and the parser object. …\n"],["parse_args","Toolchain::Test::CLI","Toolchain/Test/CLI.html#method-c-parse_args","(argv = ARGV)","<p>Parse arguments given as <code>argv</code>.\n<p>Returns hash containing all options as key=value pairs and the parser object. …\n"],["parse_ref","Toolchain::Git","Toolchain/Git.html#method-c-parse_ref","(ref = ENV['GITHUB_REF'], fallback = nil)","<p>Pass a reference <code>ref</code> and a fallback <code>fallback</code> and return the parsed reference.\n<p>Reference, in this case, …\n"],["post_process_errors","Object","Object.html#method-i-post_process_errors","(index_errors, errors_map)","<p>Resolves all errors from index to point to the correct location in include files.\n<p>Given <code>index_errors</code> and …\n"],["print_errors","Object","Object.html#method-i-print_errors","(errors_map)","<p>Print all errors in <code>errors_map</code>. <code>errors_map</code> is a hash containing a mapping of filename -&gt; [errors]. …\n"],["print_loaded_extensions","Object","Object.html#method-i-print_loaded_extensions","()","<p>print help print all loaded extensions\n"],["process","MultipageHtml5CSS","MultipageHtml5CSS.html#method-i-process","(_doc)","<p>Process CSS for document <code>_doc</code>. <code>_doc</code> is unused at the moment.\n<p>Returns the CSS inside HTML style tags\n"],["red","String","String.html#method-i-red","()",""],["register","Toolchain::ExtensionManager","Toolchain/ExtensionManager.html#method-i-register","(ext)","<p>Register an extension <code>ext</code> with the <code>ExtensionManager</code>.\n<p>Returns nothing.\n"],["register","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-i-register","(proc)","<p>Register a process <code>proc</code> and sort the list of registered processes by priority.\n<p>Returns nothing.\n"],["related_to?","Asciidoctor::AbstractNode","Asciidoctor/AbstractNode.html#method-i-related_to-3F","(node)","<p>Is this node (self) of interest when generating a TOC for node?\n<p>Returns true if node is of interest, false …\n"],["reparent","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-reparent","(node, parent)","<p>Change node parent to new parent recursively\n"],["replace_js_tags_with_blob","Toolchain::Pre::CombineAndTranspileJS","Toolchain/Pre/CombineAndTranspileJS.html#method-i-replace_js_tags_with_blob","(path, js_blob)","<p>Remove all &lt;script src=“…”/&gt; tags and replace with single &lt;script src=“blob”/&gt; …\n"],["reverse_color","String","String.html#method-i-reverse_color","()",""],["run","Toolchain::BaseExtension","Toolchain/BaseExtension.html#method-i-run","(_adoc)","<p>Takes a document (a converted asciidoctor document) as input.\n<p>Parameters: <code>_adoc</code> contains parsed and original …\n"],["run","Toolchain::BaseProcess","Toolchain/BaseProcess.html#method-i-run","()","<p>Runs the process. Takes no arguments.\n<p>Returns nothing, but throws an exception if not implemented in the …\n"],["run","Toolchain::IdChecker","Toolchain/IdChecker.html#method-i-run","(adoc)","<p>Run the ID tests on the given document (<code>adoc</code>).\n<p>Returns a list of errors (can be empty).\n"],["run","Toolchain::IfChecker","Toolchain/IfChecker.html#method-i-run","(adoc)","<p>Run the if tests on the given document (<code>adoc</code>).\n<p>Returns a list of errors (can be empty).\n"],["run","Toolchain::LinkChecker","Toolchain/LinkChecker.html#method-i-run","(adoc)","<p>Run the Link tests on the given document (<code>adoc</code>).\n<p>Returns a list of errors (can be empty).\n"],["run","Toolchain::PatternBlacklist","Toolchain/PatternBlacklist.html#method-i-run","(adoc, blacklist_file = '../blacklist.txt')","<p>Run the Pattern tests on the given document (<code>adoc</code>). Illegal patterns are loaded from <code>blacklist_file</code>. …\n"],["run","Toolchain::Post::CompileSearchIndex","Toolchain/Post/CompileSearchIndex.html#method-i-run","(html = nil, outfile: nil)","<p>Takes a single HTML file or a list of HTML files (<code>html</code>). If not provided, the HTML will be inferred from …\n"],["run","Toolchain::Pre::CombineAndTranspileJS","Toolchain/Pre/CombineAndTranspileJS.html#method-i-run","(filepaths = nil)","<p>Combines JS files referenced in docinfo{,-footer}.html into a single .js file, transpiles them with  …\n"],["run","Toolchain::Pre::CreateTOC","Toolchain/Pre/CreateTOC.html#method-i-run","( adoc = nil, json_filepath = CM.get('toc.file') )","<p>Creates a TOC JSON file from an <code>adoc</code> object Default JSON path is taken from <code>ConfigManager</code>.\n<p>Returns toc …\n"],["run","Toolchain::ProcessManager","Toolchain/ProcessManager.html#method-i-run","()","<p>Run all registered processes as separate threads.\n"],["run_tests","Object","Object.html#method-i-run_tests","(filename)","<p>Run all extensions registered with <code>ExtensionManager</code> on the file <code>filename</code>.\n<p>During this process, the file …\n"],["section","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-section","(node)","<p>Process a Section. Each Section will either be split off into its own page or processed as normal by …\n"],["sections?","Asciidoctor::Document","Asciidoctor/Document.html#method-i-sections-3F","()","<p>Override the AbstractBlock sections?() check to enable the Table Of Contents. This extension may generate …\n"],["sectnum","Asciidoctor::Document","Asciidoctor/Document.html#method-i-sectnum","(delimiter = nil, append = nil)","<p>Return the saved section number for this Document object (which was originally a Section)\n"],["sectnum","Asciidoctor::Section","Asciidoctor/Section.html#method-i-sectnum","(delimiter = '.', append = nil)","<p>Extend sectnum() to use the Document&#39;s saved sectnum. Document objects normally do not have sectnums, …\n"],["send","Toolchain::Notify::Slack","Toolchain/Notify/Slack.html#method-i-send","()","<p>Send the message defined in +@file+ to the Slack channel in +ENV+.\n<p>Returns nothing.\n"],["set_multipage_attrs","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-set_multipage_attrs","(node)","<p>Add multipage attribute to all sections in node, recursively.\n"],["setup","Toolchain::Build","Toolchain/Build.html#method-c-setup","(build_dir = DEFAULT_BUILD_DIR, content: 'content')","<p>Setup build directory.\n<p>Params:\n<p><code>build_dir</code> Build directory\n"],["stage_log","Object","Object.html#method-i-stage_log","(stage, msg, color = :green)","<p>Create a log entry for a given stage.\n<p>The stage is defined by <code>stage</code>, and will be formated like:\n\n<pre class=\"ruby\">[<span class=\"ruby-identifier\">stage</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["template","Toolchain::Notify::Slack","Toolchain/Notify/Slack.html#method-i-template","(msg)","<p>Returns a Slack template with <code>msg</code> as message part. Returned format it Slack-readable JSON.\n"],["test_files","Object","Object.html#method-i-test_files","(files)","<p>Test all files given as <code>files</code>, <code>files</code> must be a list of filenames. Only used for testing individual files, …\n"],["test_link","Toolchain::LinkChecker","Toolchain/LinkChecker.html#method-i-test_link","(link)","<p>Test a <code>link</code>, i.e. try to perform a <code>GET</code> request.\n<p>Return nil if success, or <code>msg</code> if an error occured.\n"],["toolchain_path","Toolchain","Toolchain.html#method-c-toolchain_path","(path = nil)","<p>toolchain_path Returns path to toolchain root.\n"],["underline","String","String.html#method-i-underline","()",""],["update","Toolchain::ConfigManager","Toolchain/ConfigManager.html#method-i-update","(file)","<p>Update current configuration with configuration from <code>file</code>.\n<p>Merging of the configuration options is with …\n"],["write","MultipageHtml5Converter","MultipageHtml5Converter.html#method-i-write","(output, target)","<p>Convert each page and write it to file. Use filenames based on IDs.\n"],["lunr.js","","lib/utils/lunr_js.html","","<p>/**\n\n<pre>* lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.8\n* Copyright ...</pre>\n"]]}}